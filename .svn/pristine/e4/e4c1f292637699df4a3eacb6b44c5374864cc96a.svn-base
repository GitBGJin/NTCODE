using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;
using SmartEP.Core.Enums;
using SmartEP.Core.Interfaces;
using SmartEP.Service.BaseData.MPInfo;
using SmartEP.DomainModel.BaseData;
using SmartEP.Service.DataAuditing.AuditInterfaces;
using SmartEP.Utilities.Office;
using Telerik.Web.UI;

namespace SmartEP.WebUI.Pages.EnvAir.Audit
{
    /// <summary>
    /// 名称：AuditLog.aspx.cs
    /// 创建人：徐龙超
    /// 创建日期：2015-10-10
    /// 维护人员：
    /// 最新维护人员：
    /// 最新维护日期：
    /// 功能摘要：审核日志查询
    /// 虚拟分页类
    /// 版权所有(C)：江苏远大信息股份有限公司
    /// </summary>
    public partial class AuditLog : SmartEP.WebUI.Common.BasePage
    {
        AuditLogService auditlogService = new AuditLogService();
        /// <summary>
        /// 选择因子
        /// </summary>
        private IList<IPollutant> factors = null;

        /// <summary>
        /// 选择站点
        /// </summary>
        private IList<IPoint> points = null;

        protected void Page_Load(object sender, EventArgs e)
        {
            if (!IsPostBack)
            {
                InitControl();
            }
        }

        #region 初始化控件
        private void InitControl()
        {
            dtpBegin.SelectedDate = DateTime.Now.AddDays(-1);
            dtpEnd.SelectedDate = DateTime.Now;
        }
        #endregion

        #region 事件
        protected void auditLogGrid_NeedDataSource(object sender, Telerik.Web.UI.GridNeedDataSourceEventArgs e)
        {
            BindGrid();
        }

        /// <summary>
        /// 查询按纽事件
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        protected void btnSearch_Click(object sender, EventArgs e)
        {
            auditLogGrid.Rebind();
        }

        /// <summary>
        /// ToolBar事件
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        protected void gridRTB_ButtonClick(object sender, RadToolBarEventArgs e)
        {
            Telerik.Web.UI.RadToolBarButton button = (Telerik.Web.UI.RadToolBarButton)e.Item;
            if (button.CommandName == "ExportToExcel")
            {
                //auditLogGrid
                //ExcelHelper.DataTableToExcel(auditLogGrid.DataSource, "数据查询", "数据查询", this.Page);
            }
        }
        #endregion

        #region 方法
        #region Grid绑定
        private void BindGrid()
        {
            if (!IsPostBack)
            {
                //因子关联
                pointCbxRsm_SelectedChanged();
            }
            string[] factorCodes = factorCbxRsm.GetFactorValues(SmartEP.Core.Enums.CbxRsmReturnType.Code);
            DateTime dtBegion = dtpBegin.SelectedDate.Value;
            DateTime dtEnd = dtpEnd.SelectedDate.Value;
            string[] portIds = pointCbxRsm.GetPointValues(SmartEP.Core.Enums.CbxRsmReturnType.ID);
            factors = factorCbxRsm.GetFactors();
            var auditLogData = auditlogService.RerieveAirLog(portIds, factorCodes, dtBegion, dtEnd,Session["UserGuid"].ToString()).OrderByDescending(x=>x.tstamp);
            auditLogGrid.DataSource = auditLogData;
        }
        #endregion

        /// <summary>
        /// 站点因子联动
        /// </summary>
        protected void pointCbxRsm_SelectedChanged()
        {
            points = pointCbxRsm.GetPoints();
            InstrumentChannelService m_InstrumentChannelService = new InstrumentChannelService();
            IList<string> list = new List<string>();
            string[] factor;
            string factors = string.Empty;
            foreach (IPoint point in points)
            {
                IQueryable<PollutantCodeEntity> p = m_InstrumentChannelService.RetrieveChannelListByPointUid(point.PointGuid);
                list = list.Union(p.Select(t => t.PollutantName)).ToList();
            }
            factor = list.ToArray();
            foreach (string f in factor)
            {
                factors += f + ";";
            }
            factorCbxRsm.SetFactorValuesFromNames(factors);
        }
        #endregion

        /// <summary>
        /// 数据导出格式化
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        protected void auditLogGrid_GridExporting(object sender, GridExportingArgs e)
        {
            if (e.ExportType == ExportType.Excel || e.ExportType == ExportType.Word)
            {
                string css = "<style> td { border:solid 0.1pt #000000; }</style>";
                e.ExportOutput = e.ExportOutput.Replace("</head>", css + "</head>");
            }
        }

        protected void auditLogGrid_ItemDataBound(object sender, GridItemEventArgs e)
        {
                try
                {
                    RadGrid myRadGrid = ((RadGrid)sender);
                    if (e.Item is GridDataItem && myRadGrid.MasterTableView.DataSourceCount > 0)
                    {
                        GridDataItem item = (GridDataItem)e.Item;
                        foreach (GridColumn col in myRadGrid.MasterTableView.RenderColumns)
                        {
                            string CurrUName = col.UniqueName;
                            if (CurrUName.Equals("时间") && col.Visible == true)
                            {
                                AuditLogInfo log = (AuditLogInfo)item.DataItem;
                                TableCell cell = item[CurrUName];
                                cell.Text = Convert.ToDateTime(log.tstamp).ToString() ;
                            }
                        }
                    }
                }
                catch
                {
                }
        }
    }
}