using System;
using System.Data;
using System.Configuration;
using System.Collections;
using System.Web;
using System.Web.Security;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Web.UI.WebControls.WebParts;
using System.Web.UI.HtmlControls;
using System.IO;
using System.Text;
using Aspose.Cells;
using Telerik.Web.UI;
using System.Data.SqlClient;
using System.Data.OleDb;
using System.Collections.Generic;
using SmartEP.Data.SqlServer.MonitoringBusiness;
using SmartEP.Data.SqlServer.BaseData;
using SmartEP.Service.DataAuditing.AuditInterfaces;
using SmartEP.Service.BaseData.Exchange;
using SmartEP.Core.Generic;
using SmartEP.Utilities.Transfer;
using SmartEP.DomainModel.BaseData;
using SmartEP.Service.DataAnalyze.Air.DataQuery;
using SmartEP.Utilities.Caching;

namespace SmartEP.WebUI.Pages.EnvAir.Exchange
{
    public partial class DayReportDBFUpload : SmartEP.WebUI.Common.BasePage
    {
        String DataFolder = "";

        /// <summary>
        /// FTP配置Service
        /// </summary>
        ApproveMappingService g_ApproveMappingService = Singleton<ApproveMappingService>.GetInstance();

        protected void Page_Load(object sender, System.EventArgs e)
        {
            String target = Request.Params["__EVENTTARGET"];
            String args = Request.Params["__EVENTARGUMENT"];
            if (!IsPostBack)
            {
                RadFtpDate.SelectedDate = DateTime.Today.AddDays(-1);
                #region 初使化时间
                //RadMonthYearPicker1.Culture = System.Globalization.CultureInfo.CreateSpecificCulture("en");
                //RadMonthYearPicker1.DateInput.DisplayDateFormat = "yyyy年MM月";
                //RadMonthYearPicker1.SelectedDate = System.DateTime.Now.AddDays(-1);
                #endregion
                RadFileExplorer1.VisibleControls = GetVisibleControls();

                ViewState["VPath"] = System.Web.HttpContext.Current.Request.ApplicationPath + "/Pages/EnvAir/Exchange/上报数据/";
                String[] RadFileExpPath = new String[1];
                RadFileExpPath[0] = ViewState["VPath"].ToString();
                String[] allowedFileExtensions = new string[4] { ".dbf", ".txt", ".zip", ".rar" };

                RadFileExplorer1.Configuration.ViewPaths = RadFileExpPath;
                RadFileExplorer1.Grid.MasterTableView.NoMasterRecordsText = "没有记录!";

                BindUpFileType();
                BindApproveCbx();
                BindWord();
            }

            if (target != null && args != null && target == "BtnDownLoad" && (args.ToUpper().IndexOf(".DBF") > 0 || args.ToUpper().IndexOf(".TXT") > 0))
            {
                String NewFileName = "";
                if (args.LastIndexOf('/') >= 0) NewFileName = args.Substring(args.LastIndexOf('/') + 1); else NewFileName = args;
                MyDownLoadFile(Server.MapPath(args), NewFileName);
            }

        }


        //protected void RadTxtFtpPWD_PreRender(object sender, System.EventArgs e)
        //{
        //    RadTxtFtpPWD.Attributes["value"] = RadTxtFtpPWD.Text;
        //}

        protected Telerik.Web.UI.FileExplorer.FileExplorerControls GetVisibleControls()
        {
            Telerik.Web.UI.FileExplorer.FileExplorerControls explorerControls = 0;
            //explorerControls |= Telerik.Web.UI.FileExplorer.FileExplorerControls.AddressBox;
            explorerControls |= Telerik.Web.UI.FileExplorer.FileExplorerControls.Grid;
            explorerControls |= Telerik.Web.UI.FileExplorer.FileExplorerControls.Toolbar;
            explorerControls |= Telerik.Web.UI.FileExplorer.FileExplorerControls.TreeView;
            explorerControls |= Telerik.Web.UI.FileExplorer.FileExplorerControls.ContextMenus;
            return explorerControls;
        }

        protected void RadFileExplorer1_ItemCommand(object sender, RadFileExplorerEventArgs e)
        {
            switch (e.Command)
            {
                case "UploadFile": break;
                case "MoveDirectory": break;
                case "CreateDirectory": break;
                case "DeleteDirectory": break;
                case "DeleteFile": break;
                case "MoveFile": break;
            }
            // e.Cancel = true; // Cancel the operation
        }

        /// <summary>
        /// 刷新FileExplorer
        /// </summary>
        private void RefreshFileExplorer(String Path)
        {
            String Dir = "";
            if (Path != "") Dir = VirtualPathUtility.GetDirectory(Path);
            String ScriptGetObj = " var oExplorer = $find('" + RadFileExplorer1.ClientID + "');";
            String ScriptSetCurDir = Dir == "" ? "" : " oExplorer.set_currentDirectory('" + Dir + "');";
            String ScriptRefObj = " oExplorer.refresh();";
            RadAjaxPanel1.ResponseScripts.Add(ScriptGetObj + ScriptSetCurDir + ScriptRefObj);
        }

        protected String getCheckedNode(RadTreeView RTV, String NameOrValue)
        {
            String selected4Sql = "", selectedName = "", selectedValue = "";
            foreach (RadTreeNode item in RTV.GetAllNodes())
            {
                if (item.Text.Length > 0 && item.Value.Length > 0 && item.Checked == true)
                {
                    selected4Sql += ", " + item.Value + " AS [" + item.Text + "]";
                    if (selectedName == "") { selectedName = item.Text; } else { selectedName += ";" + item.Text; }
                    if (selectedValue == "") { selectedValue = item.Value; } else { selectedValue += ";" + item.Value; }
                }
            }
            switch (NameOrValue)
            {
                case "Name":
                    return selectedName;
                case "Value":
                    return selectedValue;
                default:
                    return selected4Sql;
            }
        }

        private void BindUpFileType()
        {
            //String[] isUpFileType = ConfigurationManager.AppSettings["UpFileType"].ToString().Split(':');
            //jszjChk.Checked = Convert.ToBoolean(isUpFileType[0]);
            //RzjChk.Checked = Convert.ToBoolean(isUpFileType[1]);
            //ZkyzjChk.Checked = Convert.ToBoolean(isUpFileType[2]);

        }

        protected void btnSearch_Click(object sender, EventArgs e)
        {
            //string year = RadMonthYearPicker1.SelectedDate.Value.Year.ToString();
            //string month = RadMonthYearPicker1.SelectedDate.Value.Month.ToString();
            //if (month.Length < 2) month = "0" + month;

            //RadFileExplorer1.TreeView.Nodes.Clear();
            ////String selectedPath = Context.Request.ApplicationPath + "/Business/EnvAir/Reports/" + DataFolder + "/" + year + "/" + month + "/";
            //String selectedPath = Context.Request.ApplicationPath + "/Pages/EnvAir/Exchange/上报数据/上报小时数据/" + DataFolder + "/" + year + "/" + month + "/";
            //RefreshFileExplorer(selectedPath);

            //RadFileExplorer1.Configuration.ViewPaths = new string[] { selectedPath };
        }

        public void MyDownLoadFile(String FileNamePath, String NewFileName)
        {
            //WriteFile分块下载
            FileInfo fileInfo = new FileInfo(FileNamePath);
            if (fileInfo.Exists == true)
            {
                const long ChunkSize = 409600;//100K 每次读取文件，只读取100Ｋ，这样可以缓解服务器的压力
                byte[] buffer = new byte[ChunkSize];

                FileStream iStream = File.OpenRead(FileNamePath);
                if (iStream.Length == 0) return;
                Response.Clear();
                long dataLengthToRead = iStream.Length;//获取下载的文件总大小

                Response.ContentType = "application/octet-stream";
                Response.AddHeader("Content-Disposition", "attachment; filename=" + HttpUtility.UrlEncode(NewFileName));
                while (dataLengthToRead > 0 && Response.IsClientConnected)
                {
                    int lengthRead = iStream.Read(buffer, 0, Convert.ToInt32(ChunkSize));//读取的大小
                    Response.OutputStream.Write(buffer, 0, lengthRead);
                    Response.Flush();
                    dataLengthToRead = dataLengthToRead - lengthRead;
                }
                Response.Close();
            }
        }

        protected void RunScript(String JsScrpit)
        {
            ScriptManager.RegisterStartupScript(this, this.GetType(), "Alarm", "<script type='text/javascript' language='javascript'>" + JsScrpit + "</script>", false);
        }

        protected void RadBtnFTP_Click(object sender, EventArgs e)
        {
            if (string.IsNullOrEmpty(ApproveCbx.SelectedValue))
            {
                this.Alert("当前FTP服务器配置有误，请联系管理员！");
                return;
            }
            DT_ApproveMappingEntity entity = g_ApproveMappingService.RetrieveByUid(ApproveCbx.SelectedValue);
            if (entity == null || string.IsNullOrEmpty(entity.IpAddress) || string.IsNullOrEmpty(entity.ApproveId) || string.IsNullOrEmpty(entity.ApprovePwd))
            {
                this.Alert("当前FTP服务器配置有误，请联系管理员！");
                return;
            }
            FTPHelper myFTP = new FTPHelper(entity.IpAddress, entity.ApproveId, entity.ApprovePwd);
            DateTime DT = RadFtpDate.SelectedDate.Value;//.AddDays(-1)
            //服务器上的路径
            String fileDayPath = String.Format("{0}\\{1}\\{2}\\", ConfigurationManager.AppSettings["DataPath_Day"], DT.ToString("yyyy"), DT.ToString("MM"));
            String fileHourPath = String.Format("{0}\\{1}\\{2}\\", ConfigurationManager.AppSettings["DataPath_Hour"], DT.ToString("yyyy"), DT.ToString("MM"));

            String folderName = entity.ConnCode, strSuccess = "", strFailure = "", strMsg = "";
            String appPath = HttpRuntime.AppDomainAppPath;

            //发送小时国家站数据
            if (jswx.Checked)
            {
                string folderName_hour = ConfigurationManager.AppSettings["GUOJIA_hour"];
                string StateUploadName_hour = ConfigurationManager.AppSettings["StateUploadName_hour"].ToString();
                String fileName = String.Format("{0}{1}{2}{3}.DBF", StateUploadName_hour, DT.ToString("yyyy"), DT.ToString("MM"), DT.ToString("dd"));
                if (myFTP.UploadSmall(appPath + "\\" + fileHourPath + fileName, folderName_hour) == "上传成功！")
                    strSuccess += fileName + "，";
                else strFailure += fileName + "，";
            }
            //发送日国家站数据
            if (jswx.Checked)
            {
                string folderName_Day = ConfigurationManager.AppSettings["GUOJIA_Day"];
                string StateUploadName_Day = ConfigurationManager.AppSettings["StateUploadName_Day"].ToString();
                String fileName = String.Format("{0}{1}{2}{3}.DBF", StateUploadName_Day, DT.ToString("yyyy"), DT.ToString("MM"), DT.ToString("dd"));
                if (myFTP.UploadSmall(appPath + "\\" + fileDayPath + fileName, folderName_Day) == "上传成功！")
                    strSuccess += fileName + "，";
                else strFailure += fileName + "，";
            }
            //发送小时省建站数据
            if (xjswx.Checked)
            {
                string folderName_QUXIAN = ConfigurationManager.AppSettings["QUXIAN_hour"];
                string ProvincialUploadName_hour = ConfigurationManager.AppSettings["ProvincialUploadName_hour"].ToString();
                String fileName = String.Format("{0}{1}{2}{3}.DBF", ProvincialUploadName_hour, DT.ToString("yyyy"), DT.ToString("MM"), DT.ToString("dd"));
                if (myFTP.UploadSmall(appPath + "\\" + fileHourPath + fileName, folderName_QUXIAN) == "上传成功！")
                    strSuccess += fileName + "，";
                else strFailure += fileName + "，";
            }
            //发送国控点日AQI
            if (AQIDayReport.Checked)
            {
                string fileName = string.Format(ConfigurationManager.AppSettings["StateUploadName_Day_Excel"].ToString(), DT.ToString("yyyyMMdd"));
                if (myFTP.UploadSmall(appPath + "\\" + fileDayPath + fileName, folderName) == "上传成功！")
                    strSuccess += fileName + "，";
                else strFailure += fileName + "，";
            }
            #region 上传情况
            strSuccess = strSuccess.Trim('，');
            if (strSuccess != "") strSuccess += "上传成功";
            strFailure = strFailure.Trim('，');
            if (strFailure != "") strFailure += "上传失败";

            if (strSuccess != "" && strFailure != "") strMsg = strSuccess + "；" + strFailure + "。";
            else if (strSuccess != "") strMsg = strSuccess + "。";
            else if (strFailure != "") strMsg = strFailure + "。";
            #endregion
            this.Alert(strMsg);
        }

        public void BindApproveCbx()
        {
            ApproveCbx.DataSource = g_ApproveMappingService.RetrieveList();
            ApproveCbx.DataTextField = "Name";
            ApproveCbx.DataValueField = "RowGuid";
            ApproveCbx.DataBind();

        }

        public void BindWord()
        {
            //string[] Word = ApproveCbx.SelectedValue.Split(';');
            //RadTxtFtpServerIP.Text = Word[0];
            //RadTxtFtpUID.Text = Word[1];
            //RadTxtFtpPWD.Text = Word[2];
        }

        protected void ApproveCbx_SelectedIndexChanged(object sender, RadComboBoxSelectedIndexChangedEventArgs e)
        {
            BindWord();
        }

        #region MonthYearPicker BUG处理
        protected void RadMonthYearPicker1_ViewCellCreated(object sender, MonthYearViewCellCreatedEventArgs e)
        {
            if (e.Cell.CellType == Telerik.Web.UI.Calendar.MonthYearViewCellType.MonthCell)
            {
                try
                {
                    System.Web.UI.WebControls.HyperLink month = e.Cell.Controls[0] as System.Web.UI.WebControls.HyperLink;
                    month.Text = GetOtherMonthName(month.Text);
                }
                catch { }
            }
        }

        /// <summary>
        /// 解决RadMonthYearPicker控件的中文版的月不变的Bug
        /// 从月的英文缩写转换成中文
        /// </summary>
        /// <param name="cnName"></param>
        /// <returns></returns>
        public static string GetOtherMonthName(string cnName)
        {
            return new Dictionary<string, string>() { { "Jan", "1月" }, { "Feb", "2月" }, { "Mar", "3月" }, { "Apr", "4月" }, { "May", "5月" }, { "Jun", "6月" }, { "Jul", "7月" }, { "Aug", "8月" }, { "Sep", "9月" }, { "Oct", "10月" }, { "Nov", "11月" }, { "Dec", "12月" }, { "", "" } }[cnName];
        }
        #endregion

        protected void btnBTF_Click(object sender, EventArgs e)
        {
            string dayDBFstr = string.Empty;
            string hourDBFstr = string.Empty;
            string ProblemData = string.Empty;
            string UserGuid = SessionHelper.Get("DisplayName");
            AuditDataService auditDataService = new AuditDataService();
            /// <summary>
            /// 上传临时表接口
            /// </summary>
            DataQueryByHourForUpLoadSZService g_DataQueryByHourForUpLoadSZService = Singleton<DataQueryByHourForUpLoadSZService>.GetInstance();
            DateTime dtStart = Convert.ToDateTime(RadFtpDate.SelectedDate.Value.ToString("yyyy-MM-dd 00:00:00"));
            DateTime dtEnd = Convert.ToDateTime(RadFtpDate.SelectedDate.Value.ToString("yyyy-MM-dd 23:59:59"));
            if (jswx.Checked == true)
            {
                auditDataService.CreateGuoKongAQIHourExportDBFFile(dtStart, dtEnd);
                auditDataService.CreateGuoKongAQIDayExportDBFFile(dtStart, dtEnd);
            }
            if (xjswx.Checked == true)
            {
                hourDBFstr = auditDataService.CreateShengKongAQIHourExportDBFFile(dtStart, dtEnd);
                dayDBFstr = auditDataService.CreateShengKongAQIDayExportDBFFile(dtStart, dtEnd);
            }
            if(xjss.Checked == true)
            {
                auditDataService.CreateSKAQIHourExportDBFFile(dtStart, dtEnd);
            }

            #region 区县DBF重新生成状态更新

            DataTable dtNew = g_DataQueryByHourForUpLoadSZService.GetDataNew(dtStart, dtEnd).ToTable();
            ProblemData = UserGuid + "于" + DateTime.Now + "手动重新生成DBF！";
            if (dtNew.Rows.Count > 0)
            {
                g_DataQueryByHourForUpLoadSZService.insertQuXianDataNew(ProblemData.Replace("\\n", "<br />"), dtStart, dtEnd);
            }

            Alert("已重新生成！" + ProblemData);
            #endregion

        }
    }
}
