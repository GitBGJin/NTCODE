using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using SmartEP.Core.Generic;
using SmartEP.Data.SqlServer.BaseData;
using System.Data;
using SmartEP.WebService.Internal.Common;
using SmartEP.Data.SqlServer.MonitoringBusiness.Air;
using System.Text;
using SmartEP.Service.BaseData.Channel;
using SmartEP.DomainModel.BaseData;
using SmartEP.Service.Frame;
using SmartEP.Service.Core.Enums;
using SmartEP.DomainModel;
using SmartEP.Service.BaseData.MPInfo;
using SmartEP.Utilities.AdoData;
using SmartEP.Service.DataAnalyze.Air;
using SmartEP.Service.DataAnalyze.Air.AQIReport;
using SmartEP.Utilities.DataTypes.ExtensionMethods;
using SmartEP.Service.AutoMonitoring.Air;


namespace SmartEP.WebService
{
    /// <summary>
    /// 名称：GetDataClass.cs
    /// 创建人：徐阳
    /// 创建日期：2017-07-03
    /// 维护人员：
    /// 最新维护人员：
    /// 最新维护日期：
    /// 功能摘要：获取数据类
    /// 版权所有(C)：江苏远大信息股份有限公司
    /// </summary>
    public class GetDataClass
    {
        /// <summary>
        /// 获取测点数据
        /// </summary>
        /// <returns>
        /// </returns>
        public string GetMonitoringPointJson()
        {
            MonitoringPointDAL monitoringPointDAL = new MonitoringPointDAL();
            DataTable dt = new DataTable();
            dt = monitoringPointDAL.GetMonitoringPointDataTableForData();
            //for (int i = 0; i < dt.Columns.Count; i++)
            //{
            //    DataColumn dc = dt.Columns[i];
            //    if (dc.ColumnName != "PointId" && dc.ColumnName != "MonitoringPointUid" && dc.ColumnName != "MonitoringPointName" && dc.ColumnName != "X" && dc.ColumnName != "Y" && dc.ColumnName != "PName")
            //    {
            //        dt.Columns.Remove(dc);
            //        i--;
            //    }
            //}
            StringBuilder sb = new StringBuilder();
            sb.Append("[{\"PortInfo\":[{\"state\":0,\"label\":\"环境空气\",\"id\":\"000\",\"children\":[");
            DataTable dtCtr = monitoringPointDAL.GetPortTypes();
            string PortTypeName = string.Empty;     //控制等级
            string PortTypeValue = string.Empty;    //控制Guid
            string str = string.Empty;
            string json = string.Empty;
            for (int i = 0; i < dtCtr.Rows.Count; i++)
            {
                PortTypeName = dtCtr.Rows[i]["PortTypeName"].ToString();
                PortTypeValue = dtCtr.Rows[i]["PortTypeValue"].ToString();
                //str = string.Format("{\"state\":0,\"lable\":\"{0}\",\"id\":\"{1}\",\"children\":", PortTypeName, PortTypeValue);
                str = "{\"state\":0,\"label\":\"" + PortTypeName + "\",\"id\":\"" + PortTypeValue + "\",\"children\":[";
                sb.Append(str);
                DataView dv = dt.AsDataView();
                dv.RowFilter = "PName = '" + PortTypeName + "'";
                foreach (DataRowView drv in dv)
                {
                    string str2 = "{\"state\":0,\"label\":\"" + drv["MonitoringPointName"] + "\",\"id\":\"" + drv["PointId"] + "\"},";
                    sb.Append(str2);
                }
                string strForsb = sb.ToString().TrimEnd(',');
                sb.Clear().Append(strForsb);
                sb.Append("]},");
                dv.RowFilter = "";
            }
            string result = sb.ToString().TrimEnd(',') + "]}]}]";
            return result;
        }

        /// <summary>
        /// 获取测点信息
        /// </summary>
        /// <returns>
        /// </returns>
        public string GetPortMessage(string[] pointId, string type, string fac)
        {
            MonitoringPointDAL monitoringPointDAL = new MonitoringPointDAL();
            DataTable dt = new DataTable();
            dt = monitoringPointDAL.GetPortMessageForData(pointId, type, fac);
            StringBuilder sb = new StringBuilder();
            sb.Append("[{\"PortMessages\":");
            string json = dt.ToJsonBySerialize();
            sb.Append(json + "}]");
            return sb.ToString();
        }

        /// <summary>
        /// 获取测点信息
        /// </summary>
        /// <returns>
        /// </returns>
        public string GetPortMessage(string[] pointId, string type, string fac, DateTime dt1, DateTime dt2)
        {
            MonitoringPointDAL monitoringPointDAL = new MonitoringPointDAL();
            DataTable dt = new DataTable();
            dt = monitoringPointDAL.GetPortMessageForData(pointId, type, fac, dt1, dt2);
            StringBuilder sb = new StringBuilder();
            sb.Append("[{\"PortMessages\":");
            string json = dt.ToJsonBySerialize();
            sb.Append(json + "}]");
            return sb.ToString();
        }

        /// <summary>
        /// 获取周边城市测点信息
        /// </summary>
        /// <returns>
        /// </returns>
        //public string GetAroundPortMessage(string pointId, string type, DateTime dtime)
        //{
        //    MonitoringPointDAL monitoringPointDAL = new MonitoringPointDAL();
        //    DataTable dt = new DataTable();
        //    dt = monitoringPointDAL.GetAroundPortMessageForData(pointId, type, dtime);
        //    StringBuilder sb = new StringBuilder();
        //    sb.Append("[{\"PortMessages\":");
        //    string json = dt.ToJsonBySerialize();
        //    sb.Append(json + "}]");
        //    return sb.ToString();
        //}

        /// <summary>
        /// 获取周边城市测点信息排序
        /// </summary>
        /// <returns>
        /// </returns>
        public string GetAroundPortMessageOrder(string order, string type)
        {
            MonitoringPointDAL monitoringPointDAL = new MonitoringPointDAL();
            DataTable dt = new DataTable();
            dt = monitoringPointDAL.GetAroundPortMessageForDataOrder(order, type);
            StringBuilder sb = new StringBuilder();
            sb.Append("[{\"PortMessages\":");
            string json = string.Empty;
            if (dt == null)
            {
                json = "";
            }
            else
            {
                json = dt.ToJsonBySerialize();
            }
            sb.Append(json + "}]");
            return sb.ToString();
        }

        /// <summary>
        /// 获取周边城市测点信息排序
        /// </summary>
        /// <returns>
        /// </returns>
        public string GetAroundPortData(string order, string type)
        {
            MonitoringPointDAL monitoringPointDAL = new MonitoringPointDAL();
            DataTable dt = new DataTable();
            dt = monitoringPointDAL.GetAroundPortData(order, type);
            StringBuilder sb = new StringBuilder();
            sb.Append("[{\"PortMessages\":");
            string json = string.Empty;
            if (dt == null)
            {
                json = "";
            }
            else
            {
                json = dt.ToJsonBySerialize();
            }
            sb.Append(json + "}]");
            return sb.ToString();
        }

        /// <summary>
        /// 获取所有站点分类
        /// </summary>
        /// <returns>
        /// </returns>
        public string GetPortTypes()
        {
            MonitoringPointDAL monitoringPointDAL = new MonitoringPointDAL();
            DataTable dt = new DataTable();
            dt = monitoringPointDAL.GetPortTypes();
            StringBuilder sb = new StringBuilder();
            sb.Append("[{\"PortTypes\":");
            string json = "[{\"PortTypeName\":\"所有选项\",\"PortTypeValue\":\"ALL\"}," + dt.ToJsonBySerialize().TrimStart('[');
            sb.Append(json + "}]");
            return sb.ToString();
        }

        /// <summary>
        /// 获取因子信息
        /// </summary>
        /// <returns>
        /// </returns>
        public string GetPollutantCodeDataTable()
        {
            DictionaryService dicService = new DictionaryService();
            string guid = dicService.GetValueByText(DictionaryType.AMS, "通道类型", "状态");
            IList<V_CodeMainItemEntity> codeMainItemList = dicService.RetrieveList(DictionaryType.AMS, "计量单位").ToList();//根据字典类型、字典名获取字典项列表
            DataTable dt = new DataTable("PollutantData");
            dt.Columns.Add("PollutantCode");
            dt.Columns.Add("PollutantName");
            dt.Columns.Add("Unit");
            MonitoringPointAirService monitoringPointAir = Singleton<MonitoringPointAirService>.GetInstance();//空气测点类
            IList<MonitoringPointEntity> monitoringPointAirList = monitoringPointAir.RetrieveAirMPListByEnable().ToList();//获取所有启用的空气点位列表
            IList<PollutantCodeEntity> pollutantCodeAirList = GetPollutantDataByPointList(monitoringPointAirList);
            pollutantCodeAirList = pollutantCodeAirList.Where(t => t.TypeUid != guid).ToList();
            foreach (PollutantCodeEntity pollutantCodeEntity in pollutantCodeAirList)
            {
                DataRow dr = dt.NewRow();
                dr["PollutantCode"] = pollutantCodeEntity.PollutantCode;
                dr["PollutantName"] = pollutantCodeEntity.PollutantName;
                dr["Unit"] = codeMainItemList.Where(t => t.ItemGuid == pollutantCodeEntity.MeasureUnitUid)
                                             .Select(t => t.ItemText).FirstOrDefault();
                dt.Rows.Add(dr);
            }
            StringBuilder sb = new StringBuilder();
            sb.Append("[{\"FactorList\":");
            string json = dt.ToJsonBySerialize();
            sb.Append(json + "}]");
            return sb.ToString();
        }

        /// <summary>
        /// 获取参与AQI计算因子数据
        /// </summary>
        /// <returns>
        /// </returns>
        public string GetPollutantByCalAQI()
        {
            AirPollutantService airPollutantService = new AirPollutantService();
            List<PollutantCodeEntity> list = airPollutantService.RetrieveListByCalAQI().ToList();
            DataTable dt = new DataTable();
            StringBuilder sb = new StringBuilder();
            sb.Append("[{\"ApiFactor\":[");
            foreach (PollutantCodeEntity pce in list)
            {
                sb.Append("{\"Name\":\"" + pce.PollutantName + "\",\"EName\":\"" + pce.ChemicalSymbol + "\",\"Code\":\"" + pce.PollutantCode + "\"},");
            }
            string json = sb.ToString().TrimEnd(',');
            sb.Clear().Append(json + "]}]");
            return sb.ToString();
        }

        /// <summary>
        /// 获取优良数据统计(默认显示南通市区，可选测点)
        /// </summary>
        /// <returns>
        /// </returns>
        public string GetCountData(string[] ports, DateTime dtStart, DateTime dtEnd)
        {
            DatabaseHelper g_DatabaseHelper = Singleton<DatabaseHelper>.GetInstance();
            AQICalculateService m_AQICalculateService = new AQICalculateService();
            DayAQIService m_DayAQIService = Singleton<DayAQIService>.GetInstance();
            if (ports[0] == "Default")
            {
                string PointTableName = "V_Point_Air_SiteMap_Region";
                string sqlPoint = string.Format(@"SELECT B.PID
                                        FROM {0} A
                                        inner join {0} B
                                        on A.PName='{1}' and A.CGuid = B.PGuid", PointTableName, "南通市区");
                DataTable dvPoint = g_DatabaseHelper.ExecuteDataTable(sqlPoint, "AMS_BaseDataConnection");
                string[] arr = dvPoint.AsEnumerable().Select(d => Convert.ToString(d.Field<int>("PID"))).ToArray();
                string[] regionGuids = { "cda2fe50-94b2-4176-bd41-32cb90584b70" };
                string[] fac = { };
                string[] years = { };
                Dictionary<string, string> regionName = new Dictionary<string, string>();
                regionName.Add("cda2fe50-94b2-4176-bd41-32cb90584b70", "南通市区");
                int recordTotal = 0;
                DataTable dt = m_DayAQIService.GetAreaOverDaysList(arr, regionGuids, fac, dtStart, dtEnd, "质量类别", "", 100, 99999, 0, years, regionName, out recordTotal);
                return dt.ToJsonBySerialize();
            }
            else
            {
                string[] fac = { };
                string[] years = { };
                int recordTotal = 0;
                DataTable dt = m_DayAQIService.GetOverDaysList(ports, fac, dtStart, dtEnd, "质量类别", "", 100, 99999, 0, years, out recordTotal);
                return dt.ToJsonBySerialize();
            }
        }

        /// <summary>
        /// 获取区域综合分析数据
        /// </summary>
        /// <returns>
        /// </returns>
        public string GetAreaDataAnalyze(DateTime dtStart, DateTime dtEnd)
        {
            DatabaseHelper g_DatabaseHelper = Singleton<DatabaseHelper>.GetInstance();
            AQICalculateService m_AQICalculateService = new AQICalculateService();
            string PointTableName = "V_Point_Air_SiteMap_Region";
            string sqlRegion = string.Format(@"SELECT PName FROM {0} WHERE PGuid is null", PointTableName);
            DataView dvRegion = g_DatabaseHelper.ExecuteDataView(sqlRegion, "AMS_BaseDataConnection");
            Dictionary<string, string[]> dic = new Dictionary<string, string[]>();
            //            if (RegionName != "")
            //            {
            //                string sqlPoint = string.Format(@"SELECT B.PID
            //                                        FROM {0} A
            //                                        inner join {0} B
            //                                        on A.PName='{1}' and A.CGuid = B.PGuid", PointTableName, RegionName);
            //                DataTable dvPoint = g_DatabaseHelper.ExecuteDataTable(sqlPoint, "AMS_BaseDataConnection");
            //                string[] arr = dvPoint.AsEnumerable().Select(d => Convert.ToString(d.Field<int>("PID"))).ToArray();
            //                dic.Add(RegionName, arr);
            //            }
            //            else
            //            {
            foreach (DataRowView drv in dvRegion)
            {
                string sqlPoint = string.Format(@"SELECT B.PID
                                        FROM {0} A
                                        inner join {0} B
                                        on A.PName='{1}' and A.CGuid = B.PGuid", PointTableName, drv["PName"]);
                DataTable dvPoint = g_DatabaseHelper.ExecuteDataTable(sqlPoint, "AMS_BaseDataConnection");
                string[] arr = dvPoint.AsEnumerable().Select(d => Convert.ToString(d.Field<int>("PID"))).ToArray();
                dic.Add(drv["PName"].ToString(), arr);
            }
            //}
            DataTable dtForAQI = new DataTable();
            dtForAQI.Columns.Add("RegionName", typeof(string));
            dtForAQI.Columns.Add("DateTime", typeof(DateTime));
            dtForAQI.Columns.Add("PM25", typeof(Decimal));
            dtForAQI.Columns.Add("PM25_IAQI", typeof(Int32));
            dtForAQI.Columns.Add("PM10", typeof(Decimal));
            dtForAQI.Columns.Add("PM10_IAQI", typeof(Int32));
            dtForAQI.Columns.Add("NO2", typeof(Decimal));
            dtForAQI.Columns.Add("NO2_IAQI", typeof(Int32));
            dtForAQI.Columns.Add("SO2", typeof(Decimal));
            dtForAQI.Columns.Add("SO2_IAQI", typeof(Int32));
            dtForAQI.Columns.Add("CO", typeof(Decimal));
            dtForAQI.Columns.Add("CO_IAQI", typeof(Int32));
            dtForAQI.Columns.Add("Max8HourO3", typeof(Decimal));
            dtForAQI.Columns.Add("Max8HourO3_IAQI", typeof(Int32));
            dtForAQI.Columns.Add("AQIValue", typeof(Int32));
            int dayNum = Convert.ToInt32((dtEnd.Subtract(dtStart)).TotalDays);
            for (int i = 0; i < dayNum; i++)
            {
                foreach (string name in dic.Keys)
                {
                    DateTime dayNew = dtStart.AddDays(i);
                    decimal? PM25PollutantValue = m_AQICalculateService.GetRegionValue(dic[name], "a34004", dayNew, 24, "1");
                    decimal? PM10PollutantValue = m_AQICalculateService.GetRegionValue(dic[name], "a34002", dayNew, 24, "1");
                    decimal? NO2PollutantValue = m_AQICalculateService.GetRegionValue(dic[name], "a21004", dayNew, 24, "1");
                    decimal? SO2PollutantValue = m_AQICalculateService.GetRegionValue(dic[name], "a21026", dayNew, 24, "1");
                    decimal? COPollutantValue = m_AQICalculateService.GetRegionValue(dic[name], "a21005", dayNew, 24, "1");
                    decimal? Max8HourO3PollutantValue = m_AQICalculateService.GetRegionValue(dic[name], "a05024", dayNew, 8, "1");
                    int? PM25Value = m_AQICalculateService.GetIAQI("a34004", Convert.ToDouble(PM25PollutantValue), 24);
                    int? PM10Value = m_AQICalculateService.GetIAQI("a34002", Convert.ToDouble(PM10PollutantValue), 24);
                    int? NO2Value = m_AQICalculateService.GetIAQI("a21004", Convert.ToDouble(NO2PollutantValue), 24);
                    int? SO2Value = m_AQICalculateService.GetIAQI("a21026", Convert.ToDouble(SO2PollutantValue), 24);
                    int? COValue = m_AQICalculateService.GetIAQI("a21005", Convert.ToDouble(COPollutantValue), 24);
                    int? Max8HourO3Value = m_AQICalculateService.GetIAQI("a05024", Convert.ToDouble(Max8HourO3PollutantValue), 8);
                    string AQIValue = m_AQICalculateService.GetAQI_Max_CNV(SO2Value, NO2Value, PM10Value, COValue, Max8HourO3Value, PM25Value, "V");
                    DataRow dr = dtForAQI.NewRow();
                    dr["RegionName"] = name;
                    dr["DateTime"] = dayNew;
                    if (PM25PollutantValue != null)
                        dr["PM25"] = PM25PollutantValue;
                    if (PM25Value != null)
                        dr["PM25_IAQI"] = PM25Value;
                    if (PM10PollutantValue != null)
                        dr["PM10"] = PM10PollutantValue;
                    if (PM10Value != null)
                        dr["PM10_IAQI"] = PM10Value;
                    if (NO2PollutantValue != null)
                        dr["NO2"] = NO2PollutantValue;
                    if (NO2Value != null)
                        dr["NO2_IAQI"] = NO2Value;
                    if (SO2PollutantValue != null)
                        dr["SO2"] = SO2PollutantValue;
                    if (SO2Value != null)
                        dr["SO2_IAQI"] = SO2Value;
                    if (COPollutantValue != null)
                        dr["CO"] = COPollutantValue;
                    if (COValue != null)
                        dr["CO_IAQI"] = COValue;
                    if (Max8HourO3PollutantValue != null)
                        dr["Max8HourO3"] = Max8HourO3PollutantValue;
                    if (Max8HourO3Value != null)
                        dr["Max8HourO3_IAQI"] = Max8HourO3Value;
                    if (AQIValue != null && AQIValue.Trim() != "")
                        dr["AQIValue"] = Convert.ToInt32(AQIValue);
                    dtForAQI.Rows.Add(dr);
                }
            }

            DataView CountValues = new DataView();                            //存放统计值
            DataTable dtCountValues = new DataTable();
            dtCountValues.Columns.Add("RegionName", typeof(string));
            dtCountValues.Columns.Add("X", typeof(string));
            dtCountValues.Columns.Add("Y", typeof(string));
            dtCountValues.Columns.Add("ExcellentCount", typeof(int));
            dtCountValues.Columns.Add("GoodCount", typeof(int));
            dtCountValues.Columns.Add("LightCount", typeof(int));
            dtCountValues.Columns.Add("MiddleCount", typeof(int));
            dtCountValues.Columns.Add("SevereCount", typeof(int));
            dtCountValues.Columns.Add("SeriesCount", typeof(int));
            dtCountValues.Columns.Add("EGRate", typeof(string));
            dtCountValues.Columns.Add("ExcellentRate", typeof(string));
            dtCountValues.Columns.Add("GoodRate", typeof(string));
            dtCountValues.Columns.Add("LightRate", typeof(string));
            dtCountValues.Columns.Add("MiddleRate", typeof(string));
            dtCountValues.Columns.Add("SevereRate", typeof(string));
            dtCountValues.Columns.Add("SeriesRate", typeof(string));
            dtCountValues.Columns.Add("PM25_Max", typeof(string));
            dtCountValues.Columns.Add("PM10_Max", typeof(string));
            dtCountValues.Columns.Add("NO2_Max", typeof(string));
            dtCountValues.Columns.Add("SO2_Max", typeof(string));
            dtCountValues.Columns.Add("CO_Max", typeof(string));
            dtCountValues.Columns.Add("Max8HourO3_Max", typeof(string));
            dtCountValues.Columns.Add("PM25_Min", typeof(string));
            dtCountValues.Columns.Add("PM10_Min", typeof(string));
            dtCountValues.Columns.Add("NO2_Min", typeof(string));
            dtCountValues.Columns.Add("SO2_Min", typeof(string));
            dtCountValues.Columns.Add("CO_Min", typeof(string));
            dtCountValues.Columns.Add("Max8HourO3_Min", typeof(string));
            dtCountValues.Columns.Add("PM25_Avg", typeof(string));
            dtCountValues.Columns.Add("PM10_Avg", typeof(string));
            dtCountValues.Columns.Add("NO2_Avg", typeof(string));
            dtCountValues.Columns.Add("SO2_Avg", typeof(string));
            dtCountValues.Columns.Add("CO_Avg", typeof(string));
            dtCountValues.Columns.Add("Max8HourO3_Avg", typeof(string));

            foreach (string name in dic.Keys)
            {
                int dayCount = dtForAQI.Select("RegionName='" + name + "' and AQIValue is not null").Count();         //某区域总天数

                DataRow drCountValues = dtCountValues.NewRow();
                DataTable dtXY = GetXY(name);
                drCountValues["RegionName"] = name;
                drCountValues["X"] = dtXY.Rows[0]["X"].ToString();
                drCountValues["Y"] = dtXY.Rows[0]["Y"].ToString();
                int ExcellentDays = dtForAQI.Select("RegionName='" + name + "' and AQIValue > 0 and AQIValue <= 50").Count();
                drCountValues["ExcellentCount"] = ExcellentDays;
                int GoodDays = dtForAQI.Select("RegionName='" + name + "' and AQIValue > 50 and AQIValue <= 100").Count();
                drCountValues["GoodCount"] = GoodDays;
                int LightDays = dtForAQI.Select("RegionName='" + name + "' and AQIValue > 100 and AQIValue <= 150").Count();
                drCountValues["LightCount"] = LightDays;
                int MiddleDays = dtForAQI.Select("RegionName='" + name + "' and AQIValue > 150 and AQIValue <= 200").Count();
                drCountValues["MiddleCount"] = MiddleDays;
                int SevereDays = dtForAQI.Select("RegionName='" + name + "' and AQIValue > 200 and AQIValue <= 300").Count();
                drCountValues["SevereCount"] = SevereDays;
                int SeriesDays = dtForAQI.Select("RegionName='" + name + "' and AQIValue > 300").Count();
                drCountValues["SeriesCount"] = SeriesDays;
                drCountValues["EGRate"] = GetPollutantValue(decimal.Parse((GoodDays + ExcellentDays).ToString()) / dayCount * 100, 1).ToString() + "%";
                drCountValues["ExcellentRate"] = GetPollutantValue(decimal.Parse((ExcellentDays).ToString()) / dayCount * 100, 1).ToString() + "%";
                drCountValues["GoodRate"] = GetPollutantValue(decimal.Parse((GoodDays).ToString()) / dayCount * 100, 1).ToString() + "%";
                drCountValues["LightRate"] = GetPollutantValue(decimal.Parse((LightDays).ToString()) / dayCount * 100, 1).ToString() + "%";
                drCountValues["MiddleRate"] = GetPollutantValue(decimal.Parse((MiddleDays).ToString()) / dayCount * 100, 1).ToString() + "%";
                drCountValues["SevereRate"] = GetPollutantValue(decimal.Parse((SevereDays).ToString()) / dayCount * 100, 1).ToString() + "%";
                drCountValues["SeriesRate"] = GetPollutantValue(decimal.Parse((SeriesDays).ToString()) / dayCount * 100, 1).ToString() + "%";
                drCountValues["PM25_Max"] = GetPollutantValue(Convert.ToDecimal(dtForAQI.Compute("MAX(PM25)", "RegionName='" + name + "' and PM25 is not null").ToString()) * 1000, 0).ToString() + "μg / m3";
                drCountValues["PM10_Max"] = GetPollutantValue(Convert.ToDecimal(dtForAQI.Compute("MAX(PM10)", "RegionName='" + name + "' and PM10 is not null").ToString()) * 1000, 0) + "μg / m3";
                drCountValues["NO2_Max"] = GetPollutantValue(Convert.ToDecimal(dtForAQI.Compute("MAX(NO2)", "RegionName='" + name + "' and NO2 is not null").ToString()) * 1000, 0) + "μg / m3";
                drCountValues["SO2_Max"] = GetPollutantValue(Convert.ToDecimal(dtForAQI.Compute("MAX(SO2)", "RegionName='" + name + "' and SO2 is not null").ToString()) * 1000, 0) + "μg / m3";
                drCountValues["CO_Max"] = GetPollutantValue(Convert.ToDecimal(dtForAQI.Compute("MAX(CO)", "RegionName='" + name + "' and CO is not null").ToString()), 0) + "mg/m3";
                drCountValues["Max8HourO3_Max"] = GetPollutantValue(Convert.ToDecimal(dtForAQI.Compute("MAX(Max8HourO3)", "RegionName='" + name + "' and Max8HourO3 is not null").ToString()) * 1000, 0) + "μg / m3";
                drCountValues["PM25_Min"] = GetPollutantValue(Convert.ToDecimal(dtForAQI.Compute("Min(PM25)", "RegionName='" + name + "' and PM25 is not null").ToString()) * 1000, 0) + "μg / m3";
                drCountValues["PM10_Min"] = GetPollutantValue(Convert.ToDecimal(dtForAQI.Compute("Min(PM10)", "RegionName='" + name + "' and PM10 is not null").ToString()) * 1000, 0) + "μg / m3";
                drCountValues["NO2_Min"] = GetPollutantValue(Convert.ToDecimal(dtForAQI.Compute("Min(NO2)", "RegionName='" + name + "' and NO2 is not null").ToString()) * 1000, 0) + "μg / m3";
                drCountValues["SO2_Min"] = GetPollutantValue(Convert.ToDecimal(dtForAQI.Compute("Min(SO2)", "RegionName='" + name + "' and SO2 is not null").ToString()) * 1000, 0) + "μg / m3";
                drCountValues["CO_Min"] = GetPollutantValue(Convert.ToDecimal(dtForAQI.Compute("Min(CO)", "RegionName='" + name + "' and CO is not null").ToString()), 0) + "mg/m3";
                drCountValues["Max8HourO3_Min"] = GetPollutantValue(Convert.ToDecimal(dtForAQI.Compute("Min(Max8HourO3)", "RegionName='" + name + "' and Max8HourO3 is not null").ToString()) * 1000, 0) + "μg / m3";
                drCountValues["Max8HourO3_Max"] = GetPollutantValue(Convert.ToDecimal(dtForAQI.Compute("MAX(Max8HourO3)", "RegionName='" + name + "' and Max8HourO3 is not null").ToString()) * 1000, 0) + "μg / m3";
                drCountValues["PM25_Avg"] = GetPollutantValue(Convert.ToDecimal(dtForAQI.Compute("AVG(PM25)", "RegionName='" + name + "' and PM25 is not null").ToString()) * 1000, 0) + "μg / m3";
                drCountValues["PM10_Avg"] = GetPollutantValue(Convert.ToDecimal(dtForAQI.Compute("AVG(PM10)", "RegionName='" + name + "' and PM10 is not null").ToString()) * 1000, 0) + "μg / m3";
                drCountValues["NO2_Avg"] = GetPollutantValue(Convert.ToDecimal(dtForAQI.Compute("AVG(NO2)", "RegionName='" + name + "' and NO2 is not null").ToString()) * 1000, 0) + "μg / m3";
                drCountValues["SO2_Avg"] = GetPollutantValue(Convert.ToDecimal(dtForAQI.Compute("AVG(SO2)", "RegionName='" + name + "' and SO2 is not null").ToString()) * 1000, 0) + "μg / m3";
                drCountValues["CO_Avg"] = GetPollutantValue(Convert.ToDecimal(dtForAQI.Compute("AVG(CO)", "RegionName='" + name + "' and CO is not null").ToString()), 0) + "mg/m3";
                drCountValues["Max8HourO3_Avg"] = GetPollutantValue(Convert.ToDecimal(dtForAQI.Compute("AVG(Max8HourO3)", "RegionName='" + name + "' and Max8HourO3 is not null").ToString()) * 1000, 0) + "μg / m3";
                dtCountValues.Rows.Add(drCountValues);
            }
            StringBuilder sb = new StringBuilder();
            sb.Append("[{\"AreaInfo\":");
            string json = dtCountValues.ToJsonBySerialize();
            sb.Append(json + "}]");
            return sb.ToString();
        }

        private static DataTable GetXY(string name)
        {
            DataTable dt = new DataTable();
            dt.Columns.Add("X", typeof(string));
            dt.Columns.Add("Y", typeof(string));
            DataRow dr = dt.NewRow();
            if (name.Contains("通州区"))
            {
                dr["X"] = "121.0922";
                dr["Y"] = "32.0666";
            }
            else if (name.Contains("如皋市"))
            {
                dr["X"] = "120.5708";
                dr["Y"] = "32.3812";
            }
            else if (name.Contains("海安县"))
            {
                dr["X"] = "120.4590";
                dr["Y"] = "32.5430";
            }
            else if (name.Contains("如东县"))
            {
                dr["X"] = "121.1747";
                dr["Y"] = "32.2981";
            }
            else if (name.Contains("通州湾示范区"))
            {
                dr["X"] = "121.2963";
                dr["Y"] = "32.1283";
            }
            else if (name.Contains("海门市"))
            {
                dr["X"] = "121.1584";
                dr["Y"] = "31.8947";
            }
            else if (name.Contains("南通市区"))
            {
                dr["X"] = "120.8580";
                dr["Y"] = "32.0039";
            }
            else if (name.Contains("启东市"))
            {
                dr["X"] = "121.6595";
                dr["Y"] = "31.8178";
            }
            dt.Rows.Add(dr);
            return dt;
        }

        /// <summary>
        /// 控制小数位
        /// </summary>
        /// <param name="value">值</param>
        /// <param name="decimalNum">小数位数</param>
        /// <returns></returns>
        public static decimal GetPollutantValue(decimal value, int decimalNum)
        {
            if (decimalNum < 0)
                return value;
            decimal valuePow = value * Convert.ToInt32(Math.Pow(10, decimalNum));
            if (valuePow - Convert.ToDecimal(Math.Floor(valuePow)) == 0M)
                return Math.Round(value, decimalNum);
            else
                return Math.Round(value, decimalNum, MidpointRounding.ToEven);
        }

        /// <summary>
        /// 根据测点实体数组获取因子数据列
        /// </summary>
        /// <param name="monitoringPointList">测点实体数组</param>
        /// <returns></returns>
        private IList<PollutantCodeEntity> GetPollutantDataByPointList(IList<MonitoringPointEntity> monitoringPointList)
        {
            IList<PollutantCodeEntity> pollutantCodeList = new List<PollutantCodeEntity>();
            InstrumentChannelService instrumentChannelService = Singleton<InstrumentChannelService>.GetInstance();
            foreach (MonitoringPointEntity monitoringPointEntity in monitoringPointList)
            {
                IQueryable<PollutantCodeEntity> pollutantCodeQueryable =
                            instrumentChannelService.RetrieveChannelListByPointUid(monitoringPointEntity.MonitoringPointUid);
                pollutantCodeList = pollutantCodeList.Union(pollutantCodeQueryable).ToList();
            }
            return pollutantCodeList;
        }

        /// <summary>
        /// 根据站点类型获取某个监测因子的最新1小时IAQI分指数情况
        /// </summary>
        /// <returns>
        /// </returns>
        public string GetIAQIByFactorAndPointType(string[] pointType, string factor)
        {
            MonitoringPointDAL monitoringPointDAL = new MonitoringPointDAL();
            PortHourAQIDAL m_PortAQIDAL = new PortHourAQIDAL();
            AirPollutantService m_AirPollutantService = new AirPollutantService();
            PollutantCodeEntity pe = m_AirPollutantService.RetrieveEntityByCode(factor);  //根据因子code获取实体
            Dictionary<string, string> dic = new Dictionary<string, string>();
            DataView dv = monitoringPointDAL.GetMonitoringPointDataTableForData().AsDataView();
            if (pointType[0] == "ALL")
            {
                foreach (DataRowView drv in dv)
                {
                    string pointId = drv["PointId"].ToString();
                    string monitoringPointName = drv["MonitoringPointName"].ToString();
                    dic.Add(pointId, monitoringPointName);
                }
            }
            else
            {
                StringBuilder sbForPT = new StringBuilder();
                for (int i = 0; i < pointType.Length; i++)
                {
                    sbForPT.Append("'" + pointType[i] + "',");
                }
                dv.RowFilter = "CGuid in (" + sbForPT.ToString().Substring(0, sbForPT.Length - 1) + ")";
                foreach (DataRowView drv in dv)
                {
                    string pointId = drv["PointId"].ToString();
                    string monitoringPointName = drv["MonitoringPointName"].ToString();
                    dic.Add(pointId, monitoringPointName);
                }
            }
            StringBuilder sb = new StringBuilder();
            sb.Append("[{\"PortIAQIBySiteType\":");
            DataTable dtForResult;
            if (factor == "a05027")
            {
                dtForResult = m_PortAQIDAL.GetAirQualityNewestOriRTReportForData(dic.Keys.ToArray(), "Recent8HoursO3NT").Table;
            }
            else if (factor == "a34004")
            {
                dtForResult = m_PortAQIDAL.GetAirQualityNewestOriRTReportForData(dic.Keys.ToArray(), "PM25").Table;
            }
            else
            {
                dtForResult = m_PortAQIDAL.GetAirQualityNewestOriRTReportForData(dic.Keys.ToArray(), pe.ChemicalSymbol).Table;
            }
            dtForResult.Columns.Add("PortName", typeof(string));
            dtForResult.Columns.Add("Unit", typeof(string));
            for (int i = 0; i < dtForResult.Rows.Count; i++)
            {
                //dtForResult.Rows[i]["DateTime"] = Convert.ToDateTime(Convert.ToDateTime(dtForResult.Rows[i]["DateTime"]).ToString("yyyy-MM-dd HH:00:00"));
                dtForResult.Rows[i]["PortName"] = dic[dtForResult.Rows[i]["PointId"].ToString()];
                dtForResult.Rows[i]["Unit"] = m_AirPollutantService.GetPollutantInfo(factor).PollutantMeasureUnit;
                if (!factor.Equals("a21005"))
                {
                    dtForResult.Rows[i][1] = (dtForResult.Rows[i][1] != DBNull.Value && dtForResult.Rows[i][1] != "") ? (Convert.ToDecimal(dtForResult.Rows[i][1].ToString()) * 1000).ToString("G0") : dtForResult.Rows[i][1];
                }
                foreach (DataColumn dc in dtForResult.Columns)
                {
                    if (dtForResult.Rows[i][dc.ColumnName] == DBNull.Value || dtForResult.Rows[i][dc.ColumnName] == "")
                    {
                        dtForResult.Rows[i][dc.ColumnName] = "--";
                    }
                }
            }
            //foreach (DataRowView drv in dvForResult)
            //{
            //    string str = "{\"PortId\":\""+drv["PointId"]+"\",\"PortName\":\""+dic[drv["PointId"].ToString()]+"\",\"FactorValue\":\""+drv[factor]+"\",\"IAQI"
            //    sb.Append();
            //}
            string json = dtForResult.ToJsonBySerialize();
            sb.Append(json + "}]");
            return sb.ToString();
        }

        /// <summary>
        /// </summary>
        /// <returns>
        /// </returns>
        public string GetIHourOrDayData(string portId, string factor, string type, DateTime dt1, DateTime dt2)
        {
            DatabaseHelper g_DatabaseHelper = Singleton<DatabaseHelper>.GetInstance();
            if (type == "1")    //小时
            {
                InfectantBy60Service m_Min60Data = Singleton<InfectantBy60Service>.GetInstance();
                DateTime dtBegion = Convert.ToDateTime(dt1.ToString("yyyy-MM-dd HH:00:00"));
                DateTime dtEnd = Convert.ToDateTime(dt2.ToString("yyyy-MM-dd HH:59:59"));
                //NT O3早一小时做处理
                if (portId == "204")
                {
                    if (factor == "a05024")
                    {
                        string sql = string.Format(@"select a.PointId,CONVERT(varchar(13),dateadd(DAY,1,Tstamp),121) as Tstamp,PollutantValue,b.MonitoringPointName,b.X,b.Y,C.PollutantName,(CASE C.PollutantCode when 'a21005' then 'mg/m3' else 'μg/m3' end) as unit
                                                    from [Air].[TB_InfectantBy60] as a,[dbo].[SY_MonitoringPoint] as b,[dbo].[SY_PollutantCode] as c
                                                    where Tstamp >= '{0}' and Tstamp <= '{1}' and a.PointId = {2} and a.PollutantCode = '{3}' and a.PointId = b.PointId and a.PollutantCode = c.PollutantCode", dt1.AddHours(-1), dt2.AddHours(-1), portId, factor);
                        DataTable dt = g_DatabaseHelper.ExecuteDataTable(sql, "AMS_AirAutoMonitorConnection");
                        for (int i = 0; i < dt.Rows.Count; i++)
                        {
                            if (dt.Rows[i]["PollutantValue"] != DBNull.Value && dt.Rows[i]["PollutantValue"].ToString().Trim() != "")
                            {
                                dt.Rows[i]["PollutantValue"] = DecimalExtension.GetPollutantValue(Convert.ToDecimal(dt.Rows[i]["PollutantValue"]), 1);
                            }
                        }
                        StringBuilder sb = new StringBuilder();
                        sb.Append("[{\"Data\":");
                        string json = dt.ToJsonBySerialize();
                        sb.Append(json + "}]");
                        return sb.ToString();
                    }
                    else
                    {
                        string sql = string.Format(@"select a.PointId,CONVERT(varchar(13),Tstamp,121) Tstamp,PollutantValue,b.MonitoringPointName,b.X,b.Y,C.PollutantName,(CASE C.PollutantCode when 'a21005' then 'mg/m3' else 'μg/m3' end) as unit
                                                    from [Air].[TB_InfectantBy60] as a,[dbo].[SY_MonitoringPoint] as b,[dbo].[SY_PollutantCode] as c
                                                    where Tstamp >= '{0}' and Tstamp <= '{1}' and a.PointId = {2} and a.PollutantCode = '{3}' and a.PointId = b.PointId and a.PollutantCode = c.PollutantCode", dt1, dt2, portId, factor);
                        DataTable dt = g_DatabaseHelper.ExecuteDataTable(sql, "AMS_AirAutoMonitorConnection");
                        for (int i = 0; i < dt.Rows.Count; i++)
                        {
                            if (factor == "a21005")
                            {
                                if (dt.Rows[i]["PollutantValue"] != DBNull.Value && dt.Rows[i]["PollutantValue"].ToString().Trim() != "")
                                {
                                    dt.Rows[i]["PollutantValue"] = DecimalExtension.GetPollutantValue(Convert.ToDecimal(dt.Rows[i]["PollutantValue"]), 1);
                                }
                            }
                            else
                            {
                                if (dt.Rows[i]["PollutantValue"] != DBNull.Value && dt.Rows[i]["PollutantValue"].ToString().Trim() != "")
                                {
                                    dt.Rows[i]["PollutantValue"] = Convert.ToDecimal((DecimalExtension.GetPollutantValue(Convert.ToDecimal(dt.Rows[i]["PollutantValue"]), 3) * 1000).ToString("G0"));
                                }
                            }
                        }
                        StringBuilder sb = new StringBuilder();
                        sb.Append("[{\"Data\":");
                        string json = dt.ToJsonBySerialize();
                        sb.Append(json + "}]");
                        return sb.ToString();
                    }
                }
                else
                {
                    string sql = string.Format(@"select a.PointId,CONVERT(varchar(13),Tstamp,121) Tstamp,PollutantValue,b.MonitoringPointName,b.X,b.Y,C.PollutantName,(CASE C.PollutantCode when 'a21005' then 'mg/m3' else 'μg/m3' end) as unit
                                                    from [Air].[TB_InfectantBy60] as a,[dbo].[SY_MonitoringPoint] as b,[dbo].[SY_PollutantCode] as c
                                                    where Tstamp >= '{0}' and Tstamp <= '{1}' and a.PointId = {2} and a.PollutantCode = '{3}' and a.PointId = b.PointId and a.PollutantCode = c.PollutantCode", dt1, dt2, portId, factor);
                    DataTable dt = g_DatabaseHelper.ExecuteDataTable(sql, "AMS_AirAutoMonitorConnection");
                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        if (factor == "a21005")
                        {
                            if (dt.Rows[i]["PollutantValue"] != DBNull.Value && dt.Rows[i]["PollutantValue"].ToString().Trim() != "")
                            {
                                dt.Rows[i]["PollutantValue"] = DecimalExtension.GetPollutantValue(Convert.ToDecimal(dt.Rows[i]["PollutantValue"]), 1);
                            }
                        }
                        else
                        {
                            if (dt.Rows[i]["PollutantValue"] != DBNull.Value && dt.Rows[i]["PollutantValue"].ToString().Trim() != "")
                            {
                                dt.Rows[i]["PollutantValue"] = Convert.ToDecimal((DecimalExtension.GetPollutantValue(Convert.ToDecimal(dt.Rows[i]["PollutantValue"]), 3) * 1000).ToString("G0"));
                            }
                        }
                    }
                    StringBuilder sb = new StringBuilder();
                    sb.Append("[{\"Data\":");
                    string json = dt.ToJsonBySerialize();
                    sb.Append(json + "}]");
                    return sb.ToString();
                }
            }
            if (type == "2")
            {
                string sql = string.Format(@"select a.PointId,CONVERT(varchar(10),DateTime,121) DateTime,PollutantValue,b.MonitoringPointName,b.X,b.Y,C.PollutantName,(CASE C.PollutantCode when 'a21005' then 'mg/m3' else 'μg/m3' end) as unit
                                                    from [Air].[TB_InfectantByDay] as a,[dbo].[SY_MonitoringPoint] as b,[dbo].[SY_PollutantCode] as c
                                                    where DateTime >= '{0}' and DateTime <'{1}' and a.PointId = {2} and a.PollutantCode = '{3}'  and a.PointId = b.PointId and a.PollutantCode = c.PollutantCode", dt1, dt2.AddDays(1), portId, factor);
                DataTable dt = g_DatabaseHelper.ExecuteDataTable(sql, "AMS_AirAutoMonitorConnection");
                for (int i = 0; i < dt.Rows.Count; i++)
                {
                    if (factor == "a21005")
                    {
                        if (dt.Rows[i]["PollutantValue"] != DBNull.Value && dt.Rows[i]["PollutantValue"].ToString().Trim() != "")
                        {
                            dt.Rows[i]["PollutantValue"] = DecimalExtension.GetPollutantValue(Convert.ToDecimal(dt.Rows[i]["PollutantValue"]), 1);
                        }
                    }
                    else
                    {
                        if (dt.Rows[i]["PollutantValue"] != DBNull.Value && dt.Rows[i]["PollutantValue"].ToString().Trim() != "")
                        {
                            dt.Rows[i]["PollutantValue"] = Convert.ToDecimal((DecimalExtension.GetPollutantValue(Convert.ToDecimal(dt.Rows[i]["PollutantValue"]), 3) * 1000).ToString("G0"));
                        }
                    }
                }
                StringBuilder sb = new StringBuilder();
                sb.Append("[{\"Data\":");
                string json = dt.ToJsonBySerialize();
                sb.Append(json + "}]");
                return sb.ToString();
            }
            return null;
        }

        /// <summary>
        /// 根据站点Id获取最新1小时AQI数据
        /// </summary>
        /// <returns>
        /// </returns>
        public string GetAQIByPointId(string arraypointTypeRegion, string[] pointType)
        {
            MonitoringPointDAL monitoringPointDAL = new MonitoringPointDAL();
            PortHourAQIDAL m_PortAQIDAL = new PortHourAQIDAL();
            DataView dv = monitoringPointDAL.GetMonitoringPointDataTableForData().AsDataView();
            StringBuilder sb = new StringBuilder();
            sb.Append("[{\"PortIAQIBySiteType\":");
            Dictionary<string, string> dic = new Dictionary<string, string>();
            DataTable dtForResult = new DataTable();
            if (arraypointTypeRegion != "ALLR")
            {
                if (pointType[0] == "ALL")
                {
                    dv.RowFilter = "CGuid = '" + arraypointTypeRegion + "'";
                    List<string> list = new List<string>();
                    foreach (DataRowView drv in dv)
                    {
                        string pointId = drv["PointId"].ToString();
                        string monitoringPointName = drv["MonitoringPointName"].ToString() + "," + drv["PName"].ToString();
                        dic.Add(pointId, monitoringPointName);
                        list.Add(drv["PointId"].ToString());
                    }
                    dtForResult = m_PortAQIDAL.GetAirQualityNewestOriRTReportWithOutFac(list.ToArray()).Table;
                }
                else
                {
                    StringBuilder sb1 = new StringBuilder();
                    List<string> list = new List<string>();
                    foreach (string s in pointType)
                    {
                        sb1.Append("'" + s + "',");
                    }
                    dv.RowFilter = "CGuid = '" + arraypointTypeRegion + "' and PointId in (" + sb1.ToString().Trim(',') + ")";
                    foreach (DataRowView drv in dv)
                    {
                        string pointId = drv["PointId"].ToString();
                        string monitoringPointName = drv["MonitoringPointName"].ToString() + "," + drv["PName"].ToString();
                        dic.Add(pointId, monitoringPointName);
                        list.Add(drv["PointId"].ToString());
                    }
                    dtForResult = m_PortAQIDAL.GetAirQualityNewestOriRTReportWithOutFac(list.ToArray()).Table;
                }
            }
            if (arraypointTypeRegion == "ALLR")
            {
                dtForResult = m_PortAQIDAL.GetAirQualityNewestOriRTReportWithOutFac(new string[] { "ALL" }).Table;
                foreach (DataRowView drv in dv)
                {
                    string pointId = drv["PointId"].ToString();
                    string monitoringPointName = drv["MonitoringPointName"].ToString() + "," + drv["PName"].ToString();
                    dic.Add(pointId, monitoringPointName);
                }
            }
            dtForResult.Columns.Add("PortName", typeof(string));
            dtForResult.Columns.Add("PortType", typeof(string));
            for (int i = 0; i < dtForResult.Rows.Count; i++)
            {
                //dtForResult.Rows[i]["DateTime"] = Convert.ToDateTime(Convert.ToDateTime(dtForResult.Rows[i]["DateTime"]).ToString("yyyy-MM-dd HH:00:00"));
                dtForResult.Rows[i]["PortName"] = dic[dtForResult.Rows[i]["PointId"].ToString()].Split(',')[0];
                dtForResult.Rows[i]["PortType"] = dic[dtForResult.Rows[i]["PointId"].ToString()].Split(',')[1];
            }
            string json = dtForResult.ToJsonBySerialize();
            sb.Append(json + "}]");
            return sb.ToString();
        }

        /// <summary>
        /// 根据站点Id获取最新1小时因子数据
        /// </summary>
        /// <returns>
        /// </returns>
        public string GetFactorByPointId(string[] pointType)
        {
            MonitoringPointDAL monitoringPointDAL = new MonitoringPointDAL();
            PortHourAQIDAL m_PortAQIDAL = new PortHourAQIDAL();
            AirPollutantService m_AirPollutantService = new AirPollutantService();
            DataView dv = monitoringPointDAL.GetMonitoringPointDataTableForData().AsDataView();
            StringBuilder sb = new StringBuilder();
            sb.Append("[{\"PortFactor\":");
            Dictionary<string, string> dic = new Dictionary<string, string>();
            foreach (DataRowView drv in dv)
            {
                string pointId = drv["PointId"].ToString();
                string monitoringPointName = drv["MonitoringPointName"].ToString() + "," + drv["PName"].ToString();
                dic.Add(pointId, monitoringPointName);
            }
            DataTable dtForResult = m_PortAQIDAL.GetFactorByPointId(pointType).Table;
            dtForResult.Columns.Add("PortName", typeof(string));
            dtForResult.Columns.Add("PortType", typeof(string));
            dtForResult.Columns.Add("factorName", typeof(string));
            dtForResult.Columns.Add("factorUnit", typeof(string));
            for (int i = 0; i < dtForResult.Rows.Count; i++)
            {
                if (dtForResult.Rows[i]["PollutantCode"].ToString().Equals("a21005"))
                {
                    dtForResult.Rows[i]["PollutantValue"] = DecimalExtension.GetPollutantValue(Convert.ToDecimal(dtForResult.Rows[i]["PollutantValue"] != DBNull.Value ? dtForResult.Rows[i]["PollutantValue"] : 0), 1);
                }
                else
                {
                    dtForResult.Rows[i]["PollutantValue"] = Convert.ToDecimal((DecimalExtension.GetPollutantValue(Convert.ToDecimal(dtForResult.Rows[i]["PollutantValue"] != DBNull.Value ? dtForResult.Rows[i]["PollutantValue"] : 0), 3) * 1000).ToString("G0"));
                }
                dtForResult.Rows[i]["Tstamp"] = Convert.ToDateTime(Convert.ToDateTime(dtForResult.Rows[i]["Tstamp"]).ToString("yyyy-MM-dd HH:00:00"));
                dtForResult.Rows[i]["PortName"] = dic[dtForResult.Rows[i]["PointId"].ToString()].Split(',')[0];
                dtForResult.Rows[i]["PortType"] = dic[dtForResult.Rows[i]["PointId"].ToString()].Split(',')[1];
                dtForResult.Rows[i]["factorName"] = m_AirPollutantService.GetPollutantInfo(dtForResult.Rows[i]["PollutantCode"].ToString()).PollutantName;
                dtForResult.Rows[i]["factorUnit"] = m_AirPollutantService.GetPollutantInfo(dtForResult.Rows[i]["PollutantCode"].ToString()).PollutantMeasureUnit;
            }
            string json = dtForResult.ToJsonBySerialize();
            sb.Append(json + "}]");
            return sb.ToString();
        }

        /// <summary>
        /// 获取空气质量日报数据
        /// </summary>
        /// <param name="portType">站点类型</param>
        /// <param name="dtStart">开始时间</param>
        /// <param name="dtEnd">结束时间</param>
        /// <param name="qualityType">空气质量类别(优,良,轻度污染,中度污染,重度污染,严重污染)</param>
        /// <returns></returns>
        public string GetDayAQIJson(string[] portType, DateTime dtStart, DateTime dtEnd, string[] qualityType)
        {
            int totalRecords = 0;
            PortDayAQIDAL m_PortAQIDAL = Singleton<PortDayAQIDAL>.GetInstance();
            MonitoringPointDAL monitoringPointDAL = new MonitoringPointDAL();
            Dictionary<string, string> dic = new Dictionary<string, string>();
            DataView dv = monitoringPointDAL.GetMonitoringPointDataTableForData().AsDataView();
            if (portType[0] == "ALL")
            {
                foreach (DataRowView drv in dv)
                {
                    string pointId = drv["PointId"].ToString();
                    string monitoringPointName = drv["MonitoringPointName"].ToString() + "," + drv["PName"].ToString();
                    dic.Add(pointId, monitoringPointName);
                }
            }
            else
            {
                StringBuilder sbForPT = new StringBuilder();
                for (int i = 0; i < portType.Length; i++)
                {
                    sbForPT.Append("'" + portType[i] + "',");
                }
                dv.RowFilter = "CGuid in (" + sbForPT.ToString().Substring(0, sbForPT.Length - 1) + ")";
                foreach (DataRowView drv in dv)
                {
                    string pointId = drv["PointId"].ToString();
                    string monitoringPointName = drv["MonitoringPointName"].ToString() + "," + drv["PName"].ToString();
                    dic.Add(pointId, monitoringPointName);
                }
            }
            DataTable dt = new DataTable();
            dt = m_PortAQIDAL.GetOriDataForData(dic.Keys.ToArray(), dtStart, dtEnd, GetClassByNum(qualityType), 99999, 0, out totalRecords).ToTable();
            dt.Columns.Add("PortName", typeof(string));
            dt.Columns.Add("PortType", typeof(string));
            for (int i = 0; i < dt.Rows.Count; i++)
            {
                //dt.Rows[i]["DateTime"] = Convert.ToDateTime(dt.Rows[i]["DateTime"]).ToString("yyyy-MM-dd");
                dt.Rows[i]["PortName"] = dic[dt.Rows[i]["PointId"].ToString()].Split(',')[0];
                dt.Rows[i]["PortType"] = dic[dt.Rows[i]["PointId"].ToString()].Split(',')[1];
                foreach (DataColumn dc in dt.Columns)
                {
                    if (dc.ColumnName.Equals("AQIValue") || dc.ColumnName.Equals("Class") || dc.ColumnName.Equals("Grade") || dc.ColumnName.Equals("PrimaryPollutant"))
                    {
                        if (dt.Rows[i][dc.ColumnName] == DBNull.Value || dt.Rows[i][dc.ColumnName].ToString().Trim().Equals(""))
                        {
                            dt.Rows[i][dc.ColumnName] = "--";
                        }
                    }
                }
            }
            StringBuilder sb = new StringBuilder();
            sb.Append("[{\"DayAQI\":");
            string json = dt.ToJsonBySerialize();
            sb.Append(json + "}]");
            return sb.ToString(); ;
        }

        /// <summary>
        /// 根据测点获取空气质量日报数据
        /// </summary>
        /// <param name="portType">站点类型</param>
        /// <param name="dtStart">开始时间</param>
        /// <param name="dtEnd">结束时间</param>
        /// <param name="qualityType">空气质量类别(优,良,轻度污染,中度污染,重度污染,严重污染)</param>
        /// <returns></returns>
        public string GetDayAQIByPointIdJson(string[] portType, DateTime dtStart, DateTime dtEnd, string[] qualityType)
        {
            int totalRecords = 0;
            PortDayAQIDAL m_PortAQIDAL = Singleton<PortDayAQIDAL>.GetInstance();
            MonitoringPointDAL monitoringPointDAL = new MonitoringPointDAL();

            DataView dv = monitoringPointDAL.GetMonitoringPointDataTableForData().AsDataView();
            Dictionary<string, string> dic = new Dictionary<string, string>();
            foreach (DataRowView drv in dv)
            {
                string pointId = drv["PointId"].ToString();
                string monitoringPointName = drv["MonitoringPointName"].ToString() + "," + drv["PName"].ToString();
                dic.Add(pointId, monitoringPointName);
            }

            DataTable dt = new DataTable();
            dt = m_PortAQIDAL.GetOriDataForData(portType, dtStart, dtEnd, GetClassByNum(qualityType), 99999, 0, out totalRecords).ToTable();
            dt.Columns.Add("PortName", typeof(string));
            dt.Columns.Add("PortType", typeof(string));
            for (int i = 0; i < dt.Rows.Count; i++)
            {
                dt.Rows[i]["PortName"] = dic[dt.Rows[i]["PointId"].ToString()].Split(',')[0]; ;
                dt.Rows[i]["PortType"] = dic[dt.Rows[i]["PointId"].ToString()].Split(',')[1];
            }
            string json = dt.ToJsonBySerialize();
            return json;
        }

        /// <summary>
        /// 根据数字获取类别
        /// </summary>
        /// <param name="qualityType"></param>
        /// <returns></returns>
        public string[] GetClassByNum(string[] qualityType)
        {
            if (qualityType.Contains("优") || qualityType.Contains("良") || qualityType.Contains("轻度污染") || qualityType.Contains("中度污染") || qualityType.Contains("重度污染") || qualityType.Contains("严重污染"))
            {
                return qualityType;
            }
            else
            {
                List<string> list = new List<string>();
                for (int i = 0; i < qualityType.Length; i++)
                {
                    switch (qualityType[i])
                    {
                        case "1":
                            list.Add("优");
                            break;
                        case "2":
                            list.Add("良");
                            break;
                        case "3":
                            list.Add("轻度污染");
                            break;
                        case "4":
                            list.Add("中度污染");
                            break;
                        case "5":
                            list.Add("重度污染");
                            break;
                        case "6":
                            list.Add("严重污染");
                            break;
                    }
                }
                return list.ToArray();
            }
        }

        /// <summary>
        /// 获取空气质量小时数据
        /// </summary>
        /// <param name="portIds">站点Id</param>
        /// <param name="dtStart">开始时间</param>
        /// <param name="dtEnd">结束时间</param>
        /// <returns></returns>
        public string GetHourAQIJson(string[] portIds, DateTime dtStart, DateTime dtEnd)
        {
            int totalRecords = 0;
            PortHourAQIDAL m_PortAQIDAL = Singleton<PortHourAQIDAL>.GetInstance();
            DataTable dt = new DataTable();
            dt = m_PortAQIDAL.GetOriDataPager(portIds, dtStart, dtEnd, 99999, 0, out totalRecords).ToTable();
            string json = dt.ToJsonBySerialize();
            return json;
        }
    }
}